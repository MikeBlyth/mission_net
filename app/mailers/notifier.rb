class Notifier < ActionMailer::Base
  default :from => "joslink@livinginnigeria.org"
  include ApplicationHelper
  include IncomingMailsHelper  
  include NotifierHelper
  include MessagesHelper
    
# Question: we use something like Notifier.send_help to get a message. This looks like 
# and instance method, so how can we call it for Notifier? Why don't we have to define
# send_help as a class method?

  def send_help(recipients)
    @content = help_content

    mail(:to => recipients, :subject=>'Joslink/Josalerts Database Help') do |format|
      format.text {render 'generic'}
      format.html {render 'generic'}
    end 
  end

  # Create messages to each recipient member summarizing their database content.
  # Contents of message is generated by member_summary_content in notifier_helper.rb
  def send_member_summary(member)
  #puts "Processing #{member ? member.name : "NIL"} for summary"
    @content = member_summary_content(member)
    msg = mail(:to => member.primary_email, 
               :cc => SiteSetting.base_email_address,
               :from => SiteSetting.base_email_address,
               :subject=>'Your Joslink Database Information') do |format|
      format.text {render 'generic'}
      format.html {render 'generic'}
    end
  end

  def send_group_message(params) #recipients, content, subject, id, response_time_limit, bcc=false)
    @content = params[:content]
    @id = params[:id]
    @response_time_limit = params[:response_time_limit]
# puts "**** Notifier @response_time_limit=#{@response_time_limit}"
    @subject = params[:subject] + ' ' + message_id_tag(:action=>:generate, :id=>@id)
    @bcc = params[:bcc]
    @following_up = params[:following_up]
    @recipients = params[:recipients].compact
#puts "**** @recipients=#{@recipients}, @subject=#{@subject}"
    mail(
      :to => (@bcc ? '' : @recipients),
      :bcc => (@bcc ? @recipients : ''), 
      :subject => @subject
                          ) do |format|
      format.text {render 'group_message'}
      format.html {render 'group_message'}
    end 
  end

  def send_test(recipients, content)
    @content = "Test from joslink@livinginnigeria.org\n\n#{content}"
    mail(:to => recipients, :subject=>'Test from database') do |format|
      format.text {render 'generic'}
      format.html {render 'generic'}
    end 
  end

  def send_generic(recipients, content, bcc=false)
#puts "**** send_generic recipients=#{recipients}, content=#{content}"
    @content = content
    mail(
      :to => (bcc ? '' : recipients),
      :bcc => (bcc ? recipients : ''), 
      :subject=>'Message from Joslink/Josalerts'
                                           ) do |format|
      format.text {render 'generic'}
      format.html {render 'generic'}
    end 
  end

#  def send_report(recipients, report_name, report)
#  #puts "Send Report: recipients=#{recipients}, report_name=#{report_name}"
#    @content = "The latest #{report_name} from the #{Settings.site.name} is attached."
#    attachments[report_name] = report
#    mail(:to => recipients, :subject=>"#{report_name} you requested") do |format|
#      format.text {render 'generic'}
#      format.html {render 'generic'}
#    end
#  end    

  # TODO: should be able to use contact.summary here for all the contact info.
  def send_info(recipients, from_member, request, members)
    @content = "Here is the info you requested ('info #{request}'):\n\n"
    if members.empty?
      @content << "No matching members found. Try with first or last name only. Check spelling.\n" +
                  "Names must be properly capitalized like 'Jones' not 'jones' or 'JONES'."
    else
      members.each do |m|
        @content << "#{m.name}:\n" 
        @content << "  location:  #{m.location}\n" if m.location
        phones = smart_join([format_phone(m.phone_1), format_phone(m.phone_2)])
        emails = smart_join([format_phone(m.email_1), format_phone(m.email_2)])
        @content << "  phone:  #{phones}\n" unless phones.blank? || m.phone_private
        @content << "  email:  #{emails}\n" unless phones.blank? || m.email_private
        @content << "  phone:  #{phones} (private!)\n" if (m == from_member) && m.phone_private
        @content << "  email:  #{emails} (private!)\n" if (m == from_member) && m.email_private
        @content << "\n"
      end
    end
    mail(:to => recipients, :subject=>'Your request for info') do |format|
      format.text {render 'generic'}
      format.html {render 'generic'}
    end 
  end

  def contact_updates(recipients, contacts)
    @contacts = contacts
    @email = true # Same template used for screen display (check) & actual mailing, so @email is
                  # used to flag that we are emailing msg. So we don't include the "Send" button.
    mail(:to => recipients, :subject=>'Recently updated contact info') do |format|
      format.text {render 'reports/contact_updates'}
      format.html {render 'reports/contact_updates'}
    end 
  end

end
